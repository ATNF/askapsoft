<project name="common" basedir=".">

    <property name="install.dir" value="install"/>
    <property name="src.dir" value="src"/>
    <property name="test.dir" value="tests"/>
    <property name="build.dir" value="build"/>
    <property name="doc.dir" value="doc"/>
    <property name="report.dir" value="test_reports"/>
    <property name="generated.dir" value="icetmp"/>
    <property name="project.jar" value="${ant.project.name}.jar"/>
    <property name="debug" value="off"/>
    <property name="verbose" value="false"/>
    <property name="junit.jar" value="/usr/local/share/java/junit4.jar"/>
    <condition property="ice.used" value="true" >
            <isset property="slice.dir"/>
    </condition>

    <script language="javascript">
        var cp = project.getProperty("classpath");
        var out = [];
        if (cp != null) {
            cp = cp.split(":");
            out = cp.map(function(item) {
                return item.substring(item.lastIndexOf("/")+1);
            });
        }
        project.setProperty("cp_jars", out.join(" "));
    </script>

    <!-- You can override resources.list to include resources in jar file -->
    <resources id="resources.list"/>

    <target name="init">
      <!-- Create the time stamp -->
      <tstamp/>
    </target>

    <target name="generate" description="custom slice2java"  depends="init" if="ice.used">

      <mkdir dir="${generated.dir}"/>
      <pathconvert property="sliceFiles" refid="slice.files" pathsep=" " />
      <exec dir="." executable="slice2java">
	<arg line="--compat -I${dep_interfaces} --output-dir ${generated.dir} ${sliceFiles}"/>
      </exec>
    </target>

    <!-- target to compile ice -->
    <target name="compile-ice" depends="generate,init"
            description="compile the source" if="ice.used" >
        <mkdir dir="${build.dir}"/>
        <!-- Compile the java code from ${src} into ${build} -->
        <javac classpath="${classpath}"
               srcdir="${generated.dir}"
               destdir="${build.dir}"
               debug="${debug}"
               verbose="${verbose}"/>
    </target>


    <target name="compile" depends="compile-ice"
            description="compile the source " >
        <mkdir dir="${build.dir}"/>

        <!-- Compile the java code from ${src.dir} into ${build.dir} -->
        <javac srcdir="${src.dir}"
               destdir="${build.dir}"
               debug="${debug}"
               verbose="${verbose}">
            <classpath>
                <pathelement path="${classpath}"/>
                <pathelement location="${junit.jar}"/>
            </classpath>
        </javac>
        <!-- Also compile the java code from ${test.dir} into ${build.dir} -->
        <mkdir dir="${test.dir}"/>
        <javac srcdir="${test.dir}"
               destdir="${build.dir}"
               debug="${debug}"
               verbose="${verbose}">
            <classpath>
                <pathelement path="${classpath}"/>
                <pathelement location="${junit.jar}"/>
            </classpath>
        </javac>
    </target>

    <target name="app-dist" depends="compile"
            description="generate the distribution with application"
            if="main.exe">
        <jar jarfile="${project.jar}">
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Main-Class" value="${main.exe}"/>
		<attribute name="Implementation-Version" value="${askap_version}"/>
		<attribute name="Class-Path" value="${cp_jars}"/>
            </manifest>
            <fileset dir="${build.dir}"/>
            <resources refid="resources.list"/>
        </jar>
    </target>

    <target name="dist" depends="compile"
            description="generate the distribution without application"
            unless="main.exe">
        <!-- Create the distribution directory -->

        <jar jarfile="${project.jar}">
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Implementation-Version" value="${askap_version}"/>
                <attribute name="Class-Path" value="${cp_jars}"/>
            </manifest>
            <fileset dir="${build.dir}"/>
            <resources refid="resources.list"/>
        </jar>
    </target>

    <target name="install" depends="dist,app-dist"
            description="install the distributable" >
        <!-- Install the ${dist} to the ${install.dir} directory tree -->
        <mkdir dir="${install.dir}/lib"/>
        <copy file="${project.jar}" todir="${install.dir}/lib"/>
    </target>

    <!-- Build javadoc documentation tree -->
    <target name="doc">
        <mkdir dir="${doc.dir}/"/>
        <javadoc destdir="${doc.dir}/">
            <classpath>
                <pathelement path="${classpath}"/>
                <pathelement location="${junit.jar}"/>
            </classpath>
            <link href="http://java.sun.com/javase/6/docs/api/"/>
            <fileset dir="${src.dir}/" includes="**/*.java" />
        </javadoc>
    </target>

    <target name="test" depends="compile"
            description="run junit tests" >
            <mkdir dir="${report.dir}/"/>
        <junit printsummary="${verbose}">
            <classpath>
                <pathelement path="${classpath}"/>
                <pathelement location="${junit.jar}"/>
                <!--<pathelement location="${project.jar}"/>-->
                <pathelement location="${build.dir}"/>
            </classpath>
            <batchtest fork="yes" todir="${report.dir}">
                <formatter type="brief" usefile="false"/>
                <formatter type="xml"/>
                <fileset dir="${test.dir}">
                    <include name="**/*Test*.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>


    <target name="clean" description="clean up" >
        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${install.dir}"/>
        <delete dir="${build.dir}"/>
        <delete dir="${generated.dir}"/>
        <delete dir="${report.dir}"/>
        <delete file="${project.jar}"/>
    </target>

</project>

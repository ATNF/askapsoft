/// ----------------------------------------------------------------------------
/// This file is generated by schema_definitions/generate.py.
/// Do not edit directly or your changes will be lost!
/// ----------------------------------------------------------------------------
///
/// @copyright (c) 2016 CSIRO
/// Australia Telescope National Facility (ATNF)
/// Commonwealth Scientific and Industrial Research Organisation (CSIRO)
/// PO Box 76, Epping NSW 1710, Australia
/// atnf-enquiries@csiro.au
///
/// This file is part of the ASKAP software distribution.
///
/// The ASKAP software distribution is free software: you can redistribute it
/// and/or modify it under the terms of the GNU General Public License as
/// published by the Free Software Foundation; either version 2 of the License,
/// or (at your option) any later version.
///
/// This program is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
///
/// You should have received a copy of the GNU General Public License
/// along with this program; if not, write to the Free Software
/// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
///
/// @author Daniel Collins <daniel.collins@csiro.au>

#pragma once

#include <CommonTypes.ice>

module askap
{
module interfaces
{
module skymodelservice
{
    /**
     * Allows specification of additional criteria for sky model searches.
     * For fields that are invalid for negative values, the default negative
     * value indicates that a criteria will not be used. For fields that are
     * valid for negative values, an additional boolean flag indicates whether
     * that criteria will be applied to the search or not.
     *
     * All criteria are combined with the AND operator
     **/
    struct SearchCriteria
    {
        float minRaErr = -1;
        float maxRaErr = -1;
        float minDecErr = -1;
        float maxDecErr = -1;
        float minFreq = -1;
        float maxFreq = -1;
        float minFluxPeak = -1;
        float maxFluxPeak = -1;
        float minFluxPeakErr = -1;
        float maxFluxPeakErr = -1;
        float minFluxInt = -1;
        float maxFluxInt = -1;
        float minFluxIntErr = -1;
        float maxFluxIntErr = -1;
        float minSpectralIndex = 0;
        bool useMinSpectralIndex = false;
        float maxSpectralIndex = 0;
        bool useMaxSpectralIndex = false;
        float minSpectralCurvature = 0;
        bool useMinSpectralCurvature = false;
        float maxSpectralCurvature = 0;
        bool useMaxSpectralCurvature = false;
    };

};
};
};

// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef CONTINUUM_COMPONENT_ODB_SQLITE_H
#define CONTINUUM_COMPONENT_ODB_SQLITE_H

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
#include <odb/boost/date-time/sqlite/posix-time-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "ContinuumComponent.h"

#include "DataSource-odb-sqlite.h"
#include "Polarisation-odb-sqlite.h"

#include "ContinuumComponent-odb.h"

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>
#include <odb/sqlite/query-dynamic.hxx>

namespace odb
{
  // ContinuumComponent
  //
  template <typename A>
  struct pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >
  {
    // version
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::askap::cp::sms::datamodel::version_type,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    version_type_;

    static const version_type_ version;

    // continuum_component_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::askap::cp::sms::datamodel::id_type,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    continuum_component_id_type_;

    static const continuum_component_id_type_ continuum_component_id;

    // observation_date
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::boost::posix_time::ptime,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    observation_date_type_;

    static const observation_date_type_ observation_date;

    // healpix_index
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::int64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    healpix_index_type_;

    static const healpix_index_type_ healpix_index;

    // sb_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::int64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    sb_id_type_;

    static const sb_id_type_ sb_id;

    // component_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    component_id_type_;

    static const component_id_type_ component_id;

    // ra
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    ra_type_;

    static const ra_type_ ra;

    // dec
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    dec_type_;

    static const dec_type_ dec;

    // ra_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    ra_err_type_;

    static const ra_err_type_ ra_err;

    // dec_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    dec_err_type_;

    static const dec_err_type_ dec_err;

    // freq
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    freq_type_;

    static const freq_type_ freq;

    // flux_peak
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    flux_peak_type_;

    static const flux_peak_type_ flux_peak;

    // flux_peak_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    flux_peak_err_type_;

    static const flux_peak_err_type_ flux_peak_err;

    // flux_int
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    flux_int_type_;

    static const flux_int_type_ flux_int;

    // flux_int_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    flux_int_err_type_;

    static const flux_int_err_type_ flux_int_err;

    // maj_axis
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    maj_axis_type_;

    static const maj_axis_type_ maj_axis;

    // min_axis
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    min_axis_type_;

    static const min_axis_type_ min_axis;

    // pos_ang
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pos_ang_type_;

    static const pos_ang_type_ pos_ang;

    // maj_axis_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    maj_axis_err_type_;

    static const maj_axis_err_type_ maj_axis_err;

    // min_axis_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    min_axis_err_type_;

    static const min_axis_err_type_ min_axis_err;

    // pos_ang_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pos_ang_err_type_;

    static const pos_ang_err_type_ pos_ang_err;

    // maj_axis_deconv
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    maj_axis_deconv_type_;

    static const maj_axis_deconv_type_ maj_axis_deconv;

    // min_axis_deconv
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    min_axis_deconv_type_;

    static const min_axis_deconv_type_ min_axis_deconv;

    // pos_ang_deconv
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pos_ang_deconv_type_;

    static const pos_ang_deconv_type_ pos_ang_deconv;

    // chi_squared_fit
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    chi_squared_fit_type_;

    static const chi_squared_fit_type_ chi_squared_fit;

    // rms_fit_Gauss
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    rms_fit_Gauss_type_;

    static const rms_fit_Gauss_type_ rms_fit_Gauss;

    // spectral_index
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    spectral_index_type_;

    static const spectral_index_type_ spectral_index;

    // spectral_curvature
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    spectral_curvature_type_;

    static const spectral_curvature_type_ spectral_curvature;

    // rms_image
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    rms_image_type_;

    static const rms_image_type_ rms_image;

    // has_siblings
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    has_siblings_type_;

    static const has_siblings_type_ has_siblings;

    // fit_is_estimate
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    fit_is_estimate_type_;

    static const fit_is_estimate_type_ fit_is_estimate;

    // polarisation
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::askap::cp::sms::datamodel::id_type,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    polarisation_type_;

    static const polarisation_type_ polarisation;

    // data_source
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::askap::cp::sms::datamodel::id_type,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    data_source_type_;

    static const data_source_type_ data_source;
  };

#ifdef ODB_SQLITE_QUERY_COLUMNS_DEF

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::version_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  version (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::version,
           A::table_name, "\"version\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::continuum_component_id_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  continuum_component_id (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::continuum_component_id,
                          A::table_name, "\"continuum_component_id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::observation_date_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  observation_date (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::observation_date,
                    A::table_name, "\"observation_date\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::healpix_index_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  healpix_index (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::healpix_index,
                 A::table_name, "\"healpix_index\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::sb_id_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  sb_id (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::sb_id,
         A::table_name, "\"sb_id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::component_id_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  component_id (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::component_id,
                A::table_name, "\"component_id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::ra_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  ra (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::ra,
      A::table_name, "\"ra\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::dec_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  dec (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::dec,
       A::table_name, "\"dec\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::ra_err_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  ra_err (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::ra_err,
          A::table_name, "\"ra_err\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::dec_err_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  dec_err (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::dec_err,
           A::table_name, "\"dec_err\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::freq_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  freq (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::freq,
        A::table_name, "\"freq\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::flux_peak_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  flux_peak (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::flux_peak,
             A::table_name, "\"flux_peak\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::flux_peak_err_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  flux_peak_err (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::flux_peak_err,
                 A::table_name, "\"flux_peak_err\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::flux_int_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  flux_int (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::flux_int,
            A::table_name, "\"flux_int\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::flux_int_err_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  flux_int_err (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::flux_int_err,
                A::table_name, "\"flux_int_err\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::maj_axis_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  maj_axis (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::maj_axis,
            A::table_name, "\"maj_axis\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::min_axis_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  min_axis (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::min_axis,
            A::table_name, "\"min_axis\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::pos_ang_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  pos_ang (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::pos_ang,
           A::table_name, "\"pos_ang\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::maj_axis_err_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  maj_axis_err (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::maj_axis_err,
                A::table_name, "\"maj_axis_err\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::min_axis_err_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  min_axis_err (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::min_axis_err,
                A::table_name, "\"min_axis_err\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::pos_ang_err_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  pos_ang_err (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::pos_ang_err,
               A::table_name, "\"pos_ang_err\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::maj_axis_deconv_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  maj_axis_deconv (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::maj_axis_deconv,
                   A::table_name, "\"maj_axis_deconv\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::min_axis_deconv_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  min_axis_deconv (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::min_axis_deconv,
                   A::table_name, "\"min_axis_deconv\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::pos_ang_deconv_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  pos_ang_deconv (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::pos_ang_deconv,
                  A::table_name, "\"pos_ang_deconv\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::chi_squared_fit_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  chi_squared_fit (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::chi_squared_fit,
                   A::table_name, "\"chi_squared_fit\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::rms_fit_Gauss_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  rms_fit_Gauss (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::rms_fit_Gauss,
                 A::table_name, "\"rms_fit_Gauss\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::spectral_index_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  spectral_index (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::spectral_index,
                  A::table_name, "\"spectral_index\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::spectral_curvature_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  spectral_curvature (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::spectral_curvature,
                      A::table_name, "\"spectral_curvature\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::rms_image_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  rms_image (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::rms_image,
             A::table_name, "\"rms_image\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::has_siblings_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  has_siblings (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::has_siblings,
                A::table_name, "\"has_siblings\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::fit_is_estimate_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  fit_is_estimate (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::fit_is_estimate,
                   A::table_name, "\"fit_is_estimate\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::polarisation_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  polarisation (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::polarisation,
                A::table_name, "\"polarisation_component_id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::data_source_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  data_source (pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::data_source,
               A::table_name, "\"data_source_id\"", 0);

#endif // ODB_SQLITE_QUERY_COLUMNS_DEF

  template <>
  class access::object_traits_impl< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite >:
    public access::object_traits< ::askap::cp::sms::datamodel::ContinuumComponent >
  {
    public:
    typedef access::object_traits_impl< ::askap::cp::sms::datamodel::ContinuumComponent, id_common > common_traits;

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      long long version_value;
      bool version_null;

      std::size_t version;
    };

    struct image_type
    {
      // version
      //
      long long version_value;
      bool version_null;

      // continuum_component_id
      //
      long long continuum_component_id_value;
      bool continuum_component_id_null;

      // observation_date
      //
      details::buffer observation_date_value;
      std::size_t observation_date_size;
      bool observation_date_null;

      // healpix_index
      //
      long long healpix_index_value;
      bool healpix_index_null;

      // sb_id
      //
      long long sb_id_value;
      bool sb_id_null;

      // component_id
      //
      details::buffer component_id_value;
      std::size_t component_id_size;
      bool component_id_null;

      // ra
      //
      double ra_value;
      bool ra_null;

      // dec
      //
      double dec_value;
      bool dec_null;

      // ra_err
      //
      double ra_err_value;
      bool ra_err_null;

      // dec_err
      //
      double dec_err_value;
      bool dec_err_null;

      // freq
      //
      double freq_value;
      bool freq_null;

      // flux_peak
      //
      double flux_peak_value;
      bool flux_peak_null;

      // flux_peak_err
      //
      double flux_peak_err_value;
      bool flux_peak_err_null;

      // flux_int
      //
      double flux_int_value;
      bool flux_int_null;

      // flux_int_err
      //
      double flux_int_err_value;
      bool flux_int_err_null;

      // maj_axis
      //
      double maj_axis_value;
      bool maj_axis_null;

      // min_axis
      //
      double min_axis_value;
      bool min_axis_null;

      // pos_ang
      //
      double pos_ang_value;
      bool pos_ang_null;

      // maj_axis_err
      //
      double maj_axis_err_value;
      bool maj_axis_err_null;

      // min_axis_err
      //
      double min_axis_err_value;
      bool min_axis_err_null;

      // pos_ang_err
      //
      double pos_ang_err_value;
      bool pos_ang_err_null;

      // maj_axis_deconv
      //
      double maj_axis_deconv_value;
      bool maj_axis_deconv_null;

      // min_axis_deconv
      //
      double min_axis_deconv_value;
      bool min_axis_deconv_null;

      // pos_ang_deconv
      //
      double pos_ang_deconv_value;
      bool pos_ang_deconv_null;

      // chi_squared_fit
      //
      double chi_squared_fit_value;
      bool chi_squared_fit_null;

      // rms_fit_Gauss
      //
      double rms_fit_Gauss_value;
      bool rms_fit_Gauss_null;

      // spectral_index
      //
      double spectral_index_value;
      bool spectral_index_null;

      // spectral_curvature
      //
      double spectral_curvature_value;
      bool spectral_curvature_null;

      // rms_image
      //
      double rms_image_value;
      bool rms_image_null;

      // has_siblings
      //
      long long has_siblings_value;
      bool has_siblings_null;

      // fit_is_estimate
      //
      long long fit_is_estimate_value;
      bool fit_is_estimate_null;

      // polarisation
      //
      long long polarisation_value;
      bool polarisation_null;

      // data_source
      //
      long long data_source_value;
      bool data_source_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static version_type
    version (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&, bool bind_version = true);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&, const version_type* = 0);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 33UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 1UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char optimistic_erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // ContinuumComponent
  //
  template <>
  struct alias_traits<
    ::askap::cp::sms::datamodel::Polarisation,
    id_sqlite,
    access::object_traits_impl< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite >::polarisation_tag>
  {
    typedef alias_traits<
      ::askap::cp::sms::datamodel::Polarisation,
      id_common,
      access::object_traits_impl< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite >::polarisation_tag>
    common_traits;

    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::askap::cp::sms::datamodel::DataSource,
    id_sqlite,
    access::object_traits_impl< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite >::data_source_tag>
  {
    typedef alias_traits<
      ::askap::cp::sms::datamodel::DataSource,
      id_common,
      access::object_traits_impl< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite >::data_source_tag>
    common_traits;

    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite >
  {
    // polarisation
    //
    typedef
    odb::alias_traits<
      ::askap::cp::sms::datamodel::Polarisation,
      id_sqlite,
      access::object_traits_impl< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite >::polarisation_tag>
    polarisation_alias_;

    // data_source
    //
    typedef
    odb::alias_traits<
      ::askap::cp::sms::datamodel::DataSource,
      id_sqlite,
      access::object_traits_impl< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite >::data_source_tag>
    data_source_alias_;
  };

  template <typename A>
  struct query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >:
    query_columns_base< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite >
  {
    // version
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::askap::cp::sms::datamodel::version_type,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    version_type_;

    static const version_type_ version;

    // continuum_component_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::askap::cp::sms::datamodel::id_type,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    continuum_component_id_type_;

    static const continuum_component_id_type_ continuum_component_id;

    // observation_date
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::boost::posix_time::ptime,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    observation_date_type_;

    static const observation_date_type_ observation_date;

    // healpix_index
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::int64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    healpix_index_type_;

    static const healpix_index_type_ healpix_index;

    // sb_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::int64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    sb_id_type_;

    static const sb_id_type_ sb_id;

    // component_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    component_id_type_;

    static const component_id_type_ component_id;

    // ra
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    ra_type_;

    static const ra_type_ ra;

    // dec
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    dec_type_;

    static const dec_type_ dec;

    // ra_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    ra_err_type_;

    static const ra_err_type_ ra_err;

    // dec_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    dec_err_type_;

    static const dec_err_type_ dec_err;

    // freq
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    freq_type_;

    static const freq_type_ freq;

    // flux_peak
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    flux_peak_type_;

    static const flux_peak_type_ flux_peak;

    // flux_peak_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    flux_peak_err_type_;

    static const flux_peak_err_type_ flux_peak_err;

    // flux_int
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    flux_int_type_;

    static const flux_int_type_ flux_int;

    // flux_int_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    flux_int_err_type_;

    static const flux_int_err_type_ flux_int_err;

    // maj_axis
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    maj_axis_type_;

    static const maj_axis_type_ maj_axis;

    // min_axis
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    min_axis_type_;

    static const min_axis_type_ min_axis;

    // pos_ang
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pos_ang_type_;

    static const pos_ang_type_ pos_ang;

    // maj_axis_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    maj_axis_err_type_;

    static const maj_axis_err_type_ maj_axis_err;

    // min_axis_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    min_axis_err_type_;

    static const min_axis_err_type_ min_axis_err;

    // pos_ang_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pos_ang_err_type_;

    static const pos_ang_err_type_ pos_ang_err;

    // maj_axis_deconv
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    maj_axis_deconv_type_;

    static const maj_axis_deconv_type_ maj_axis_deconv;

    // min_axis_deconv
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    min_axis_deconv_type_;

    static const min_axis_deconv_type_ min_axis_deconv;

    // pos_ang_deconv
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pos_ang_deconv_type_;

    static const pos_ang_deconv_type_ pos_ang_deconv;

    // chi_squared_fit
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    chi_squared_fit_type_;

    static const chi_squared_fit_type_ chi_squared_fit;

    // rms_fit_Gauss
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    rms_fit_Gauss_type_;

    static const rms_fit_Gauss_type_ rms_fit_Gauss;

    // spectral_index
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    spectral_index_type_;

    static const spectral_index_type_ spectral_index;

    // spectral_curvature
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    spectral_curvature_type_;

    static const spectral_curvature_type_ spectral_curvature;

    // rms_image
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    rms_image_type_;

    static const rms_image_type_ rms_image;

    // has_siblings
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    has_siblings_type_;

    static const has_siblings_type_ has_siblings;

    // fit_is_estimate
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    fit_is_estimate_type_;

    static const fit_is_estimate_type_ fit_is_estimate;

    // polarisation
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::askap::cp::sms::datamodel::id_type,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    polarisation_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::askap::cp::sms::datamodel::Polarisation,
        id_sqlite,
        polarisation_alias_ > >
    polarisation_pointer_type_;

    struct polarisation_type_: polarisation_pointer_type_, polarisation_column_type_
    {
      polarisation_type_ (odb::query_column< ::askap::cp::sms::datamodel::id_type >& qc,
                          const char* t, const char* c, const char* conv)
        : polarisation_column_type_ (qc, t, c, conv)
      {
      }
    };

    static const polarisation_type_ polarisation;

    // data_source
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::askap::cp::sms::datamodel::id_type,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    data_source_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::askap::cp::sms::datamodel::DataSource,
        id_sqlite,
        data_source_alias_ > >
    data_source_pointer_type_;

    struct data_source_type_: data_source_pointer_type_, data_source_column_type_
    {
      data_source_type_ (odb::query_column< ::askap::cp::sms::datamodel::id_type >& qc,
                         const char* t, const char* c, const char* conv)
        : data_source_column_type_ (qc, t, c, conv)
      {
      }
    };

    static const data_source_type_ data_source;
  };

#ifdef ODB_SQLITE_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::version_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  version (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::version,
           A::table_name, "\"version\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::continuum_component_id_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  continuum_component_id (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::continuum_component_id,
                          A::table_name, "\"continuum_component_id\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::observation_date_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  observation_date (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::observation_date,
                    A::table_name, "\"observation_date\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::healpix_index_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  healpix_index (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::healpix_index,
                 A::table_name, "\"healpix_index\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::sb_id_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  sb_id (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::sb_id,
         A::table_name, "\"sb_id\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::component_id_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  component_id (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::component_id,
                A::table_name, "\"component_id\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::ra_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  ra (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::ra,
      A::table_name, "\"ra\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::dec_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  dec (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::dec,
       A::table_name, "\"dec\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::ra_err_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  ra_err (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::ra_err,
          A::table_name, "\"ra_err\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::dec_err_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  dec_err (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::dec_err,
           A::table_name, "\"dec_err\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::freq_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  freq (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::freq,
        A::table_name, "\"freq\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::flux_peak_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  flux_peak (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::flux_peak,
             A::table_name, "\"flux_peak\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::flux_peak_err_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  flux_peak_err (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::flux_peak_err,
                 A::table_name, "\"flux_peak_err\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::flux_int_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  flux_int (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::flux_int,
            A::table_name, "\"flux_int\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::flux_int_err_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  flux_int_err (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::flux_int_err,
                A::table_name, "\"flux_int_err\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::maj_axis_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  maj_axis (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::maj_axis,
            A::table_name, "\"maj_axis\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::min_axis_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  min_axis (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::min_axis,
            A::table_name, "\"min_axis\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::pos_ang_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  pos_ang (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::pos_ang,
           A::table_name, "\"pos_ang\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::maj_axis_err_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  maj_axis_err (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::maj_axis_err,
                A::table_name, "\"maj_axis_err\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::min_axis_err_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  min_axis_err (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::min_axis_err,
                A::table_name, "\"min_axis_err\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::pos_ang_err_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  pos_ang_err (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::pos_ang_err,
               A::table_name, "\"pos_ang_err\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::maj_axis_deconv_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  maj_axis_deconv (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::maj_axis_deconv,
                   A::table_name, "\"maj_axis_deconv\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::min_axis_deconv_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  min_axis_deconv (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::min_axis_deconv,
                   A::table_name, "\"min_axis_deconv\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::pos_ang_deconv_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  pos_ang_deconv (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::pos_ang_deconv,
                  A::table_name, "\"pos_ang_deconv\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::chi_squared_fit_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  chi_squared_fit (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::chi_squared_fit,
                   A::table_name, "\"chi_squared_fit\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::rms_fit_Gauss_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  rms_fit_Gauss (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::rms_fit_Gauss,
                 A::table_name, "\"rms_fit_Gauss\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::spectral_index_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  spectral_index (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::spectral_index,
                  A::table_name, "\"spectral_index\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::spectral_curvature_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  spectral_curvature (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::spectral_curvature,
                      A::table_name, "\"spectral_curvature\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::rms_image_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  rms_image (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::rms_image,
             A::table_name, "\"rms_image\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::has_siblings_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  has_siblings (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::has_siblings,
                A::table_name, "\"has_siblings\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::fit_is_estimate_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  fit_is_estimate (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::fit_is_estimate,
                   A::table_name, "\"fit_is_estimate\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::polarisation_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  polarisation (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::polarisation,
                A::table_name, "\"polarisation_component_id\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::data_source_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_sqlite, A >::
  data_source (query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, typename A::common_traits >::data_source,
               A::table_name, "\"data_source_id\"", 0);

#endif // ODB_SQLITE_QUERY_COLUMNS_DEF
}

#include "ContinuumComponent-odb-sqlite.i"

#include <odb/post.hxx>

#endif // CONTINUUM_COMPONENT_ODB_SQLITE_H

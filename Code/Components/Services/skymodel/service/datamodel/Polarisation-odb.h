// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef POLARISATION_ODB_H
#define POLARISATION_ODB_H

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "Polarisation.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#ifdef BOOST_TR1_MEMORY_HPP_INCLUDED
#  include <odb/tr1/wrapper-traits.hxx>
#  include <odb/tr1/pointer-traits.hxx>
#endif
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/query-dynamic.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Polarisation
  //
  template <>
  struct class_traits< ::askap::cp::sms::datamodel::Polarisation >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::askap::cp::sms::datamodel::Polarisation >
  {
    public:
    typedef ::askap::cp::sms::datamodel::Polarisation object_type;
    typedef ::boost::shared_ptr< ::askap::cp::sms::datamodel::Polarisation > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::askap::cp::sms::datamodel::id_type id_type;
    typedef ::askap::cp::sms::datamodel::version_type version_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  template <typename A>
  struct query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >
  {
    // version
    //
    typedef odb::query_column< ::askap::cp::sms::datamodel::version_type > version_type_;

    static version_type_ version;

    // polarisation_component_id
    //
    typedef odb::query_column< ::askap::cp::sms::datamodel::id_type > polarisation_component_id_type_;

    static polarisation_component_id_type_ polarisation_component_id;

    // component_id
    //
    typedef odb::query_column< ::std::string > component_id_type_;

    static component_id_type_ component_id;

    // flux_I_median
    //
    typedef odb::query_column< double > flux_I_median_type_;

    static flux_I_median_type_ flux_I_median;

    // flux_Q_median
    //
    typedef odb::query_column< double > flux_Q_median_type_;

    static flux_Q_median_type_ flux_Q_median;

    // flux_U_median
    //
    typedef odb::query_column< double > flux_U_median_type_;

    static flux_U_median_type_ flux_U_median;

    // flux_V_median
    //
    typedef odb::query_column< double > flux_V_median_type_;

    static flux_V_median_type_ flux_V_median;

    // rms_I
    //
    typedef odb::query_column< double > rms_I_type_;

    static rms_I_type_ rms_I;

    // rms_Q
    //
    typedef odb::query_column< double > rms_Q_type_;

    static rms_Q_type_ rms_Q;

    // rms_U
    //
    typedef odb::query_column< double > rms_U_type_;

    static rms_U_type_ rms_U;

    // rms_V
    //
    typedef odb::query_column< double > rms_V_type_;

    static rms_V_type_ rms_V;

    // co_1
    //
    typedef odb::query_column< double > co_1_type_;

    static co_1_type_ co_1;

    // co_2
    //
    typedef odb::query_column< double > co_2_type_;

    static co_2_type_ co_2;

    // co_3
    //
    typedef odb::query_column< double > co_3_type_;

    static co_3_type_ co_3;

    // co_4
    //
    typedef odb::query_column< double > co_4_type_;

    static co_4_type_ co_4;

    // co_5
    //
    typedef odb::query_column< double > co_5_type_;

    static co_5_type_ co_5;

    // lambda_ref_sq
    //
    typedef odb::query_column< double > lambda_ref_sq_type_;

    static lambda_ref_sq_type_ lambda_ref_sq;

    // rmsf_fwhm
    //
    typedef odb::query_column< double > rmsf_fwhm_type_;

    static rmsf_fwhm_type_ rmsf_fwhm;

    // pol_peak
    //
    typedef odb::query_column< double > pol_peak_type_;

    static pol_peak_type_ pol_peak;

    // pol_peak_debias
    //
    typedef odb::query_column< double > pol_peak_debias_type_;

    static pol_peak_debias_type_ pol_peak_debias;

    // pol_peak_err
    //
    typedef odb::query_column< double > pol_peak_err_type_;

    static pol_peak_err_type_ pol_peak_err;

    // pol_peak_fit
    //
    typedef odb::query_column< double > pol_peak_fit_type_;

    static pol_peak_fit_type_ pol_peak_fit;

    // pol_peak_fit_debias
    //
    typedef odb::query_column< double > pol_peak_fit_debias_type_;

    static pol_peak_fit_debias_type_ pol_peak_fit_debias;

    // pol_peak_fit_err
    //
    typedef odb::query_column< double > pol_peak_fit_err_type_;

    static pol_peak_fit_err_type_ pol_peak_fit_err;

    // pol_peak_fit_snr
    //
    typedef odb::query_column< double > pol_peak_fit_snr_type_;

    static pol_peak_fit_snr_type_ pol_peak_fit_snr;

    // pol_peak_fit_snr_err
    //
    typedef odb::query_column< double > pol_peak_fit_snr_err_type_;

    static pol_peak_fit_snr_err_type_ pol_peak_fit_snr_err;

    // fd_peak
    //
    typedef odb::query_column< double > fd_peak_type_;

    static fd_peak_type_ fd_peak;

    // fd_peak_err
    //
    typedef odb::query_column< double > fd_peak_err_type_;

    static fd_peak_err_type_ fd_peak_err;

    // fd_peak_fit
    //
    typedef odb::query_column< double > fd_peak_fit_type_;

    static fd_peak_fit_type_ fd_peak_fit;

    // fd_peak_fit_err
    //
    typedef odb::query_column< double > fd_peak_fit_err_type_;

    static fd_peak_fit_err_type_ fd_peak_fit_err;

    // pol_ang_ref
    //
    typedef odb::query_column< double > pol_ang_ref_type_;

    static pol_ang_ref_type_ pol_ang_ref;

    // pol_ang_ref_err
    //
    typedef odb::query_column< double > pol_ang_ref_err_type_;

    static pol_ang_ref_err_type_ pol_ang_ref_err;

    // pol_ang_zero
    //
    typedef odb::query_column< double > pol_ang_zero_type_;

    static pol_ang_zero_type_ pol_ang_zero;

    // pol_ang_zero_err
    //
    typedef odb::query_column< double > pol_ang_zero_err_type_;

    static pol_ang_zero_err_type_ pol_ang_zero_err;

    // pol_frac
    //
    typedef odb::query_column< double > pol_frac_type_;

    static pol_frac_type_ pol_frac;

    // pol_frac_err
    //
    typedef odb::query_column< double > pol_frac_err_type_;

    static pol_frac_err_type_ pol_frac_err;

    // complex_1
    //
    typedef odb::query_column< double > complex_1_type_;

    static complex_1_type_ complex_1;

    // complex_2
    //
    typedef odb::query_column< double > complex_2_type_;

    static complex_2_type_ complex_2;

    // flag_p1
    //
    typedef odb::query_column< bool > flag_p1_type_;

    static flag_p1_type_ flag_p1;

    // flag_p2
    //
    typedef odb::query_column< bool > flag_p2_type_;

    static flag_p2_type_ flag_p2;

    // flag_p3
    //
    typedef odb::query_column< bool > flag_p3_type_;

    static flag_p3_type_ flag_p3;

    // flag_p4
    //
    typedef odb::query_column< bool > flag_p4_type_;

    static flag_p4_type_ flag_p4;
  };

#ifdef ODB_COMMON_QUERY_COLUMNS_DEF

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::version_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::version;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::polarisation_component_id_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::polarisation_component_id;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::component_id_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::component_id;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::flux_I_median_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::flux_I_median;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::flux_Q_median_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::flux_Q_median;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::flux_U_median_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::flux_U_median;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::flux_V_median_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::flux_V_median;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::rms_I_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::rms_I;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::rms_Q_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::rms_Q;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::rms_U_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::rms_U;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::rms_V_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::rms_V;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::co_1_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::co_1;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::co_2_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::co_2;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::co_3_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::co_3;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::co_4_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::co_4;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::co_5_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::co_5;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::lambda_ref_sq_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::lambda_ref_sq;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::rmsf_fwhm_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::rmsf_fwhm;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_peak_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_peak;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_peak_debias_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_peak_debias;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_peak_err_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_peak_err;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_peak_fit_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_peak_fit;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_peak_fit_debias_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_peak_fit_debias;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_peak_fit_err_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_peak_fit_err;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_peak_fit_snr_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_peak_fit_snr;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_peak_fit_snr_err_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_peak_fit_snr_err;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::fd_peak_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::fd_peak;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::fd_peak_err_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::fd_peak_err;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::fd_peak_fit_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::fd_peak_fit;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::fd_peak_fit_err_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::fd_peak_fit_err;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_ang_ref_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_ang_ref;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_ang_ref_err_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_ang_ref_err;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_ang_zero_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_ang_zero;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_ang_zero_err_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_ang_zero_err;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_frac_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_frac;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_frac_err_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::pol_frac_err;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::complex_1_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::complex_1;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::complex_2_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::complex_2;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::flag_p1_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::flag_p1;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::flag_p2_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::flag_p2;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::flag_p3_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::flag_p3;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::flag_p4_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >::flag_p4;

#endif // ODB_COMMON_QUERY_COLUMNS_DEF

  template <typename A>
  struct pointer_query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >:
    query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, A >
  {
  };

  template <>
  class access::object_traits_impl< ::askap::cp::sms::datamodel::Polarisation, id_common >:
    public access::object_traits< ::askap::cp::sms::datamodel::Polarisation >
  {
    public:
    typedef odb::query_base query_base_type;

    struct function_table_type
    {
      void (*persist) (database&, object_type&);
      pointer_type (*find1) (database&, const id_type&);
      bool (*find2) (database&, const id_type&, object_type&);
      bool (*reload) (database&, object_type&);
      void (*update) (database&, const object_type&);
      void (*erase1) (database&, const id_type&);
      void (*erase2) (database&, const object_type&);
      result<object_type> (*query) (database&, const query_base_type&);
      unsigned long long (*erase_query) (database&, const query_base_type&);
    };

    static const function_table_type* function_table[database_count];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);
  };

  // Polarisation
  //
}

#include "Polarisation-odb.i"

#include <odb/post.hxx>

#endif // POLARISATION_ODB_H

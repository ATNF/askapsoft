// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef POLARISATION_ODB_SQLITE_H
#define POLARISATION_ODB_SQLITE_H

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
#include <odb/boost/date-time/sqlite/posix-time-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "Polarisation.h"

#include "Polarisation-odb.h"

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>
#include <odb/sqlite/query-dynamic.hxx>

namespace odb
{
  // Polarisation
  //
  template <typename A>
  struct query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >
  {
    // version
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::askap::cp::sms::datamodel::version_type,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    version_type_;

    static const version_type_ version;

    // polarisation_component_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::askap::cp::sms::datamodel::id_type,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    polarisation_component_id_type_;

    static const polarisation_component_id_type_ polarisation_component_id;

    // component_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    component_id_type_;

    static const component_id_type_ component_id;

    // flux_I_median
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    flux_I_median_type_;

    static const flux_I_median_type_ flux_I_median;

    // flux_Q_median
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    flux_Q_median_type_;

    static const flux_Q_median_type_ flux_Q_median;

    // flux_U_median
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    flux_U_median_type_;

    static const flux_U_median_type_ flux_U_median;

    // flux_V_median
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    flux_V_median_type_;

    static const flux_V_median_type_ flux_V_median;

    // rms_I
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    rms_I_type_;

    static const rms_I_type_ rms_I;

    // rms_Q
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    rms_Q_type_;

    static const rms_Q_type_ rms_Q;

    // rms_U
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    rms_U_type_;

    static const rms_U_type_ rms_U;

    // rms_V
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    rms_V_type_;

    static const rms_V_type_ rms_V;

    // co_1
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    co_1_type_;

    static const co_1_type_ co_1;

    // co_2
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    co_2_type_;

    static const co_2_type_ co_2;

    // co_3
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    co_3_type_;

    static const co_3_type_ co_3;

    // co_4
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    co_4_type_;

    static const co_4_type_ co_4;

    // co_5
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    co_5_type_;

    static const co_5_type_ co_5;

    // lambda_ref_sq
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    lambda_ref_sq_type_;

    static const lambda_ref_sq_type_ lambda_ref_sq;

    // rmsf_fwhm
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    rmsf_fwhm_type_;

    static const rmsf_fwhm_type_ rmsf_fwhm;

    // pol_peak
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pol_peak_type_;

    static const pol_peak_type_ pol_peak;

    // pol_peak_debias
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pol_peak_debias_type_;

    static const pol_peak_debias_type_ pol_peak_debias;

    // pol_peak_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pol_peak_err_type_;

    static const pol_peak_err_type_ pol_peak_err;

    // pol_peak_fit
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pol_peak_fit_type_;

    static const pol_peak_fit_type_ pol_peak_fit;

    // pol_peak_fit_debias
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pol_peak_fit_debias_type_;

    static const pol_peak_fit_debias_type_ pol_peak_fit_debias;

    // pol_peak_fit_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pol_peak_fit_err_type_;

    static const pol_peak_fit_err_type_ pol_peak_fit_err;

    // pol_peak_fit_snr
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pol_peak_fit_snr_type_;

    static const pol_peak_fit_snr_type_ pol_peak_fit_snr;

    // pol_peak_fit_snr_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pol_peak_fit_snr_err_type_;

    static const pol_peak_fit_snr_err_type_ pol_peak_fit_snr_err;

    // fd_peak
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    fd_peak_type_;

    static const fd_peak_type_ fd_peak;

    // fd_peak_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    fd_peak_err_type_;

    static const fd_peak_err_type_ fd_peak_err;

    // fd_peak_fit
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    fd_peak_fit_type_;

    static const fd_peak_fit_type_ fd_peak_fit;

    // fd_peak_fit_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    fd_peak_fit_err_type_;

    static const fd_peak_fit_err_type_ fd_peak_fit_err;

    // pol_ang_ref
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pol_ang_ref_type_;

    static const pol_ang_ref_type_ pol_ang_ref;

    // pol_ang_ref_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pol_ang_ref_err_type_;

    static const pol_ang_ref_err_type_ pol_ang_ref_err;

    // pol_ang_zero
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pol_ang_zero_type_;

    static const pol_ang_zero_type_ pol_ang_zero;

    // pol_ang_zero_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pol_ang_zero_err_type_;

    static const pol_ang_zero_err_type_ pol_ang_zero_err;

    // pol_frac
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pol_frac_type_;

    static const pol_frac_type_ pol_frac;

    // pol_frac_err
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    pol_frac_err_type_;

    static const pol_frac_err_type_ pol_frac_err;

    // complex_1
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    complex_1_type_;

    static const complex_1_type_ complex_1;

    // complex_2
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    complex_2_type_;

    static const complex_2_type_ complex_2;

    // flag_p1
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    flag_p1_type_;

    static const flag_p1_type_ flag_p1;

    // flag_p2
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    flag_p2_type_;

    static const flag_p2_type_ flag_p2;

    // flag_p3
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    flag_p3_type_;

    static const flag_p3_type_ flag_p3;

    // flag_p4
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    flag_p4_type_;

    static const flag_p4_type_ flag_p4;
  };

#ifdef ODB_SQLITE_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::version_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  version (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::version,
           A::table_name, "\"version\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::polarisation_component_id_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  polarisation_component_id (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::polarisation_component_id,
                             A::table_name, "\"polarisation_component_id\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::component_id_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  component_id (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::component_id,
                A::table_name, "\"component_id\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::flux_I_median_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  flux_I_median (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::flux_I_median,
                 A::table_name, "\"flux_I_median\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::flux_Q_median_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  flux_Q_median (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::flux_Q_median,
                 A::table_name, "\"flux_Q_median\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::flux_U_median_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  flux_U_median (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::flux_U_median,
                 A::table_name, "\"flux_U_median\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::flux_V_median_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  flux_V_median (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::flux_V_median,
                 A::table_name, "\"flux_V_median\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::rms_I_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  rms_I (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::rms_I,
         A::table_name, "\"rms_I\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::rms_Q_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  rms_Q (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::rms_Q,
         A::table_name, "\"rms_Q\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::rms_U_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  rms_U (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::rms_U,
         A::table_name, "\"rms_U\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::rms_V_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  rms_V (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::rms_V,
         A::table_name, "\"rms_V\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::co_1_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  co_1 (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::co_1,
        A::table_name, "\"co_1\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::co_2_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  co_2 (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::co_2,
        A::table_name, "\"co_2\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::co_3_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  co_3 (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::co_3,
        A::table_name, "\"co_3\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::co_4_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  co_4 (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::co_4,
        A::table_name, "\"co_4\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::co_5_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  co_5 (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::co_5,
        A::table_name, "\"co_5\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::lambda_ref_sq_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  lambda_ref_sq (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::lambda_ref_sq,
                 A::table_name, "\"lambda_ref_sq\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::rmsf_fwhm_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  rmsf_fwhm (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::rmsf_fwhm,
             A::table_name, "\"rmsf_fwhm\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::pol_peak_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  pol_peak (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::pol_peak,
            A::table_name, "\"pol_peak\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::pol_peak_debias_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  pol_peak_debias (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::pol_peak_debias,
                   A::table_name, "\"pol_peak_debias\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::pol_peak_err_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  pol_peak_err (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::pol_peak_err,
                A::table_name, "\"pol_peak_err\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::pol_peak_fit_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  pol_peak_fit (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::pol_peak_fit,
                A::table_name, "\"pol_peak_fit\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::pol_peak_fit_debias_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  pol_peak_fit_debias (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::pol_peak_fit_debias,
                       A::table_name, "\"pol_peak_fit_debias\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::pol_peak_fit_err_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  pol_peak_fit_err (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::pol_peak_fit_err,
                    A::table_name, "\"pol_peak_fit_err\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::pol_peak_fit_snr_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  pol_peak_fit_snr (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::pol_peak_fit_snr,
                    A::table_name, "\"pol_peak_fit_snr\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::pol_peak_fit_snr_err_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  pol_peak_fit_snr_err (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::pol_peak_fit_snr_err,
                        A::table_name, "\"pol_peak_fit_snr_err\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::fd_peak_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  fd_peak (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::fd_peak,
           A::table_name, "\"fd_peak\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::fd_peak_err_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  fd_peak_err (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::fd_peak_err,
               A::table_name, "\"fd_peak_err\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::fd_peak_fit_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  fd_peak_fit (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::fd_peak_fit,
               A::table_name, "\"fd_peak_fit\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::fd_peak_fit_err_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  fd_peak_fit_err (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::fd_peak_fit_err,
                   A::table_name, "\"fd_peak_fit_err\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::pol_ang_ref_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  pol_ang_ref (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::pol_ang_ref,
               A::table_name, "\"pol_ang_ref\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::pol_ang_ref_err_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  pol_ang_ref_err (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::pol_ang_ref_err,
                   A::table_name, "\"pol_ang_ref_err\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::pol_ang_zero_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  pol_ang_zero (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::pol_ang_zero,
                A::table_name, "\"pol_ang_zero\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::pol_ang_zero_err_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  pol_ang_zero_err (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::pol_ang_zero_err,
                    A::table_name, "\"pol_ang_zero_err\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::pol_frac_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  pol_frac (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::pol_frac,
            A::table_name, "\"pol_frac\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::pol_frac_err_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  pol_frac_err (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::pol_frac_err,
                A::table_name, "\"pol_frac_err\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::complex_1_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  complex_1 (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::complex_1,
             A::table_name, "\"complex_1\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::complex_2_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  complex_2 (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::complex_2,
             A::table_name, "\"complex_2\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::flag_p1_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  flag_p1 (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::flag_p1,
           A::table_name, "\"flag_p1\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::flag_p2_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  flag_p2 (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::flag_p2,
           A::table_name, "\"flag_p2\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::flag_p3_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  flag_p3 (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::flag_p3,
           A::table_name, "\"flag_p3\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::flag_p4_type_
  query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >::
  flag_p4 (query_columns< ::askap::cp::sms::datamodel::Polarisation, id_common, typename A::common_traits >::flag_p4,
           A::table_name, "\"flag_p4\"", 0);

#endif // ODB_SQLITE_QUERY_COLUMNS_DEF

  template <typename A>
  struct pointer_query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >:
    query_columns< ::askap::cp::sms::datamodel::Polarisation, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::askap::cp::sms::datamodel::Polarisation, id_sqlite >:
    public access::object_traits< ::askap::cp::sms::datamodel::Polarisation >
  {
    public:
    typedef access::object_traits_impl< ::askap::cp::sms::datamodel::Polarisation, id_common > common_traits;

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      long long version_value;
      bool version_null;

      std::size_t version;
    };

    struct image_type
    {
      // version
      //
      long long version_value;
      bool version_null;

      // polarisation_component_id
      //
      long long polarisation_component_id_value;
      bool polarisation_component_id_null;

      // component_id
      //
      details::buffer component_id_value;
      std::size_t component_id_size;
      bool component_id_null;

      // flux_I_median
      //
      double flux_I_median_value;
      bool flux_I_median_null;

      // flux_Q_median
      //
      double flux_Q_median_value;
      bool flux_Q_median_null;

      // flux_U_median
      //
      double flux_U_median_value;
      bool flux_U_median_null;

      // flux_V_median
      //
      double flux_V_median_value;
      bool flux_V_median_null;

      // rms_I
      //
      double rms_I_value;
      bool rms_I_null;

      // rms_Q
      //
      double rms_Q_value;
      bool rms_Q_null;

      // rms_U
      //
      double rms_U_value;
      bool rms_U_null;

      // rms_V
      //
      double rms_V_value;
      bool rms_V_null;

      // co_1
      //
      double co_1_value;
      bool co_1_null;

      // co_2
      //
      double co_2_value;
      bool co_2_null;

      // co_3
      //
      double co_3_value;
      bool co_3_null;

      // co_4
      //
      double co_4_value;
      bool co_4_null;

      // co_5
      //
      double co_5_value;
      bool co_5_null;

      // lambda_ref_sq
      //
      double lambda_ref_sq_value;
      bool lambda_ref_sq_null;

      // rmsf_fwhm
      //
      double rmsf_fwhm_value;
      bool rmsf_fwhm_null;

      // pol_peak
      //
      double pol_peak_value;
      bool pol_peak_null;

      // pol_peak_debias
      //
      double pol_peak_debias_value;
      bool pol_peak_debias_null;

      // pol_peak_err
      //
      double pol_peak_err_value;
      bool pol_peak_err_null;

      // pol_peak_fit
      //
      double pol_peak_fit_value;
      bool pol_peak_fit_null;

      // pol_peak_fit_debias
      //
      double pol_peak_fit_debias_value;
      bool pol_peak_fit_debias_null;

      // pol_peak_fit_err
      //
      double pol_peak_fit_err_value;
      bool pol_peak_fit_err_null;

      // pol_peak_fit_snr
      //
      double pol_peak_fit_snr_value;
      bool pol_peak_fit_snr_null;

      // pol_peak_fit_snr_err
      //
      double pol_peak_fit_snr_err_value;
      bool pol_peak_fit_snr_err_null;

      // fd_peak
      //
      double fd_peak_value;
      bool fd_peak_null;

      // fd_peak_err
      //
      double fd_peak_err_value;
      bool fd_peak_err_null;

      // fd_peak_fit
      //
      double fd_peak_fit_value;
      bool fd_peak_fit_null;

      // fd_peak_fit_err
      //
      double fd_peak_fit_err_value;
      bool fd_peak_fit_err_null;

      // pol_ang_ref
      //
      double pol_ang_ref_value;
      bool pol_ang_ref_null;

      // pol_ang_ref_err
      //
      double pol_ang_ref_err_value;
      bool pol_ang_ref_err_null;

      // pol_ang_zero
      //
      double pol_ang_zero_value;
      bool pol_ang_zero_null;

      // pol_ang_zero_err
      //
      double pol_ang_zero_err_value;
      bool pol_ang_zero_err_null;

      // pol_frac
      //
      double pol_frac_value;
      bool pol_frac_null;

      // pol_frac_err
      //
      double pol_frac_err_value;
      bool pol_frac_err_null;

      // complex_1
      //
      double complex_1_value;
      bool complex_1_null;

      // complex_2
      //
      double complex_2_value;
      bool complex_2_null;

      // flag_p1
      //
      long long flag_p1_value;
      bool flag_p1_null;

      // flag_p2
      //
      long long flag_p2_value;
      bool flag_p2_null;

      // flag_p3
      //
      long long flag_p3_value;
      bool flag_p3_null;

      // flag_p4
      //
      long long flag_p4_value;
      bool flag_p4_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static version_type
    version (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&, bool bind_version = true);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&, const version_type* = 0);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 42UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 1UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char optimistic_erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // Polarisation
  //
}

#include "Polarisation-odb-sqlite.i"

#include <odb/post.hxx>

#endif // POLARISATION_ODB_SQLITE_H

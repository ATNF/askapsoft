// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef DATA_SOURCE_ODB_SQLITE_H
#define DATA_SOURCE_ODB_SQLITE_H

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
#include <odb/boost/date-time/sqlite/posix-time-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "DataSource.h"

#include "DataSource-odb.h"

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>
#include <odb/sqlite/query-dynamic.hxx>

namespace odb
{
  // DataSource
  //
  template <typename A>
  struct query_columns< ::askap::cp::sms::datamodel::DataSource, id_sqlite, A >
  {
    // version
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::askap::cp::sms::datamodel::version_type,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    version_type_;

    static const version_type_ version;

    // data_source_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::askap::cp::sms::datamodel::id_type,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    data_source_id_type_;

    static const data_source_id_type_ data_source_id;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;

    // catalogue_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    catalogue_id_type_;

    static const catalogue_id_type_ catalogue_id;
  };

#ifdef ODB_SQLITE_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::DataSource, id_sqlite, A >::version_type_
  query_columns< ::askap::cp::sms::datamodel::DataSource, id_sqlite, A >::
  version (query_columns< ::askap::cp::sms::datamodel::DataSource, id_common, typename A::common_traits >::version,
           A::table_name, "\"version\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::DataSource, id_sqlite, A >::data_source_id_type_
  query_columns< ::askap::cp::sms::datamodel::DataSource, id_sqlite, A >::
  data_source_id (query_columns< ::askap::cp::sms::datamodel::DataSource, id_common, typename A::common_traits >::data_source_id,
                  A::table_name, "\"data_source_id\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::DataSource, id_sqlite, A >::name_type_
  query_columns< ::askap::cp::sms::datamodel::DataSource, id_sqlite, A >::
  name (query_columns< ::askap::cp::sms::datamodel::DataSource, id_common, typename A::common_traits >::name,
        A::table_name, "\"name\"", 0);

  template <typename A>
  const typename query_columns< ::askap::cp::sms::datamodel::DataSource, id_sqlite, A >::catalogue_id_type_
  query_columns< ::askap::cp::sms::datamodel::DataSource, id_sqlite, A >::
  catalogue_id (query_columns< ::askap::cp::sms::datamodel::DataSource, id_common, typename A::common_traits >::catalogue_id,
                A::table_name, "\"catalogue_id\"", 0);

#endif // ODB_SQLITE_QUERY_COLUMNS_DEF

  template <typename A>
  struct pointer_query_columns< ::askap::cp::sms::datamodel::DataSource, id_sqlite, A >:
    query_columns< ::askap::cp::sms::datamodel::DataSource, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::askap::cp::sms::datamodel::DataSource, id_sqlite >:
    public access::object_traits< ::askap::cp::sms::datamodel::DataSource >
  {
    public:
    typedef access::object_traits_impl< ::askap::cp::sms::datamodel::DataSource, id_common > common_traits;

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      long long version_value;
      bool version_null;

      std::size_t version;
    };

    struct image_type
    {
      // version
      //
      long long version_value;
      bool version_null;

      // data_source_id
      //
      long long data_source_id_value;
      bool data_source_id_null;

      // name
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // catalogue_id
      //
      details::buffer catalogue_id_value;
      std::size_t catalogue_id_size;
      bool catalogue_id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static version_type
    version (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&, bool bind_version = true);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&, const version_type* = 0);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 1UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char optimistic_erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // DataSource
  //
}

#include "DataSource-odb-sqlite.i"

#include <odb/post.hxx>

#endif // DATA_SOURCE_ODB_SQLITE_H
